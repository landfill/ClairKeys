// Clairkeys - Piano Learning App
// Prisma schema file for database models
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  
  accounts         Account[]
  sessions         Session[]
  categories       Category[]
  sheetMusic       SheetMusic[]
  practiceSessions PracticeSession[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  userId    String
  createdAt DateTime @default(now())
  
  user       User         @relation(fields: [userId], references: [id])
  sheetMusic SheetMusic[]
}

model SheetMusic {
  id                Int      @id @default(autoincrement())
  title             String
  composer          String
  userId            String
  categoryId        Int?
  isPublic          Boolean  @default(false)
  animationDataUrl  String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user             User              @relation(fields: [userId], references: [id])
  category         Category?         @relation(fields: [categoryId], references: [id])
  practiceSessions PracticeSession[]
}

model PracticeSession {
  id                   Int      @id @default(autoincrement())
  userId               String
  sheetMusicId         Int
  durationSeconds      Int
  completedPercentage  Float
  createdAt            DateTime @default(now())
  
  user       User       @relation(fields: [userId], references: [id])
  sheetMusic SheetMusic @relation(fields: [sheetMusicId], references: [id])
}