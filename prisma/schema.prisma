generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String                   @id // Remove @default(cuid()) to allow manual ID assignment
  name             String?
  email            String                   @unique
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime                 @default(now())
  accounts         Account[]
  categories       Category[]
  practiceSessions PracticeSession[]
  processingJobs   ProcessingJob[]
  notifications    ProcessingNotification[]
  sessions         Session[]
  sheetMusic       SheetMusic[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id         Int          @id @default(autoincrement())
  name       String
  userId     String
  createdAt  DateTime     @default(now())
  user       User         @relation(fields: [userId], references: [id])
  sheetMusic SheetMusic[]
}

model SheetMusic {
  id               Int               @id @default(autoincrement())
  title            String
  composer         String
  userId           String
  categoryId       Int?
  isPublic         Boolean           @default(false)
  animationDataUrl String
  processingStatus String            @default("pending") // pending, processing, completed, failed
  omrJobId         String?           // OMR service job ID for tracking
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  practiceSessions PracticeSession[]
  category         Category?         @relation(fields: [categoryId], references: [id])
  user             User              @relation(fields: [userId], references: [id])
}

model PracticeSession {
  id                  Int        @id @default(autoincrement())
  userId              String
  sheetMusicId        Int
  durationSeconds     Int
  completedPercentage Float
  createdAt           DateTime   @default(now())
  sheetMusic          SheetMusic @relation(fields: [sheetMusicId], references: [id])
  user                User       @relation(fields: [userId], references: [id])
}

model ProcessingJob {
  id            String                   @id @default(cuid())
  userId        String
  fileName      String
  fileSize      Int
  status        ProcessingStatus         @default(PENDING)
  currentStage  ProcessingStage          @default(UPLOAD)
  progress      Int                      @default(0)
  metadata      Json
  result        Json?
  error         String?
  retryCount    Int                      @default(0)
  maxRetries    Int                      @default(3)
  startedAt     DateTime?
  completedAt   DateTime?
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  user          User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications ProcessingNotification[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model ProcessingNotification {
  id        String        @id @default(cuid())
  userId    String
  jobId     String
  type      String
  title     String
  message   String
  isRead    Boolean       @default(false)
  createdAt DateTime      @default(now())
  job       ProcessingJob @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum ProcessingStage {
  UPLOAD
  PARSING
  OMR
  VALIDATION
  GENERATION
}
