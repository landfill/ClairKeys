name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test before deploy
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: clairkeys_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://test:test@localhost:5432/clairkeys_test
      NEXTAUTH_SECRET: test-secret
      NEXTAUTH_URL: http://localhost:3000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma db push

      - name: Run tests
        run: npm test

      - name: Run linting
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

  build:
    name: Build application
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Build application
        run: npm run build
        env:
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            public/
            package*.json
          retention-days: 1

  deploy:
    name: Deploy to production
    runs-on: ubuntu-latest
    needs: [test, build]
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          github-comment: true

  database-migrate:
    name: Run database migrations
    runs-on: ubuntu-latest
    needs: [test, build]
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  health-check:
    name: Post-deploy health check
    runs-on: ubuntu-latest
    needs: [deploy, database-migrate]

    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://clairkeys.vercel.app/api/health)
          if [ $response -eq 200 ]; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed with status: $response"
            exit 1
          fi

      - name: Test critical endpoints
        run: |
          # Test homepage
          curl -f https://clairkeys.vercel.app/ || exit 1
          
          # Test API health
          curl -f https://clairkeys.vercel.app/api/health || exit 1
          
          # Test auth pages
          curl -f https://clairkeys.vercel.app/auth/signin || exit 1
          
          echo "‚úÖ All critical endpoints are responding"

  notify:
    name: Notify deployment status
    runs-on: ubuntu-latest
    needs: [deploy, database-migrate, health-check]
    if: always()

    steps:
      - name: Notify success
        if: needs.deploy.result == 'success' && needs.database-migrate.result == 'success' && needs.health-check.result == 'success'
        run: |
          echo "üéâ Deployment successful!"
          # Add Slack/Discord notification here if needed

      - name: Notify failure
        if: needs.deploy.result == 'failure' || needs.database-migrate.result == 'failure' || needs.health-check.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          # Add Slack/Discord notification here if needed
          exit 1